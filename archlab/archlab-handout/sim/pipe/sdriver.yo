                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f43004000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f68803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f75003000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
                            | 	#xorq %rax,%rax		# count = 0;
0x032: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx		# len -= 10
0x03c: 72b401000000000000   | 	jl Tree
                            | 
0x045:                      | Loop8:
0x045: 50a70000000000000000 | 	mrmovq (%rdi), %r10		# read val from src...
0x04f: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11	# read val from src...
0x059: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12	# read val from src...
0x063: 50d71800000000000000 | 	mrmovq 24(%rdi), %r13	# read val from src...
0x06d: 50e72000000000000000 | 	mrmovq 32(%rdi), %r14	# read val from src...
0x077: 50872800000000000000 | 	mrmovq 40(%rdi), %r8	# read val from src...
0x081: 50973000000000000000 | 	mrmovq 48(%rdi), %r9	# read val from src...
0x08b: 50573800000000000000 | 	mrmovq 56(%rdi), %rbp	# read val from src...
0x095: 40a60000000000000000 | 	rmmovq %r10, (%rsi)		# ...and store it to dst
0x09f: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# ...and store it to dst
0x0a9: 40c61000000000000000 | 	rmmovq %r12, 16(%rsi)	# ...and store it to dst
0x0b3: 40d61800000000000000 | 	rmmovq %r13, 24(%rsi)	# ...and store it to dst
0x0bd: 40e62000000000000000 | 	rmmovq %r14, 32(%rsi)	# ...and store it to dst
0x0c7: 40862800000000000000 | 	rmmovq %r8, 40(%rsi)	# ...and store it to dst
0x0d1: 40963000000000000000 | 	rmmovq %r9, 48(%rsi)	# ...and store it to dst
0x0db: 40563800000000000000 | 	rmmovq %rbp, 56(%rsi)	# ...and store it to dst
0x0e5: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0e7: 71fa00000000000000   | 	jle n1
0x0f0: c0f00100000000000000 | 	iaddq $1, %rax 	# count++
0x0fa:                      | n1:
0x0fa: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x0fc: 710f01000000000000   | 	jle n2
0x105: c0f00100000000000000 | 	iaddq $1, %rax 	# count++
0x10f:                      | n2:
0x10f: 62cc                 | 	andq %r12, %r12		# val <= 0?
0x111: 712401000000000000   | 	jle n3
0x11a: c0f00100000000000000 | 	iaddq $1, %rax 	# count++
0x124:                      | n3:
0x124: 62dd                 | 	andq %r13, %r13		# val <= 0?
0x126: 713901000000000000   | 	jle n4
0x12f: c0f00100000000000000 | 	iaddq $1,%rax 	# count++
0x139:                      | n4:
0x139: 62ee                 | 	andq %r14, %r14		# val <= 0?
0x13b: 714e01000000000000   | 	jle n5
0x144: c0f00100000000000000 | 	iaddq $1, %rax 	# count++
0x14e:                      | n5:
0x14e: 6288                 | 	andq %r8, %r8		# val <= 0?
0x150: 716301000000000000   | 	jle n6
0x159: c0f00100000000000000 | 	iaddq $1, %rax 	# count++
0x163:                      | n6:
0x163: 6299                 | 	andq %r9, %r9		# val <= 0?
0x165: 717801000000000000   | 	jle n7
0x16e: c0f00100000000000000 | 	iaddq $1, %rax 	# count++
0x178:                      | n7:
0x178: 6255                 | 	andq %rbp, %rbp		# val <= 0?
0x17a: 718d01000000000000   | 	jle n8
0x183: c0f00100000000000000 | 	iaddq $1, %rax 	# count++
0x18d:                      | n8:
0x18d: c0f74000000000000000 | 	iaddq $64, %rdi
0x197: c0f64000000000000000 | 	iaddq $64, %rsi
0x1a1: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx
0x1ab: 754500000000000000   | 	jge Loop8
                            | 
0x1b4:                      | Tree:
0x1b4: c0f20500000000000000 | 	iaddq $5, %rdx
0x1be: 72d901000000000000   | 	jl Left
0x1c7: 761202000000000000   | 	jg Right
0x1d0: 73d202000000000000   | 	je L3
0x1d9:                      | Left:
0x1d9: c0f20200000000000000 | 	iaddq $2, %rdx
0x1e3: 732403000000000000   | 	je L1
0x1ec: 76fb02000000000000   | 	jg L2
0x1f5: 90                   | 	ret
0x1f6:                      | L45:
0x1f6: c0f20100000000000000 | 	iaddq $1, %rdx
0x200: 72a902000000000000   | 	jl L4
0x209: 708002000000000000   | 	jmp L5
0x212:                      | Right:
0x212: c0f2fdffffffffffffff | 	iaddq $-3, %rdx
0x21c: 72f601000000000000   | 	jl L45
0x225: 735702000000000000   | 	je L6
                            | 
0x22e:                      | L7:
0x22e: 50a73000000000000000 | 	mrmovq 48(%rdi), %r10
0x238: 40a63000000000000000 | 	rmmovq %r10, 48(%rsi)
0x242: 62aa                 | 	andq %r10, %r10
0x244: 715702000000000000   | 	jle L6 
0x24d: c0f00100000000000000 | 	iaddq $1, %rax
0x257:                      | L6:
0x257: 50b72800000000000000 | 	mrmovq 40(%rdi), %r11
0x261: 40b62800000000000000 | 	rmmovq %r11, 40(%rsi)
0x26b: 62bb                 | 	andq %r11, %r11
0x26d: 718002000000000000   | 	jle L5
0x276: c0f00100000000000000 | 	iaddq $1, %rax
0x280:                      | L5:
0x280: 50c72000000000000000 | 	mrmovq 32(%rdi), %r12
0x28a: 40c62000000000000000 | 	rmmovq %r12, 32(%rsi)
0x294: 62cc                 | 	andq %r12, %r12
0x296: 71a902000000000000   | 	jle L4
0x29f: c0f00100000000000000 | 	iaddq $1, %rax
0x2a9:                      | L4:
0x2a9: 50d71800000000000000 | 	mrmovq 24(%rdi), %r13
0x2b3: 40d61800000000000000 | 	rmmovq %r13, 24(%rsi)
0x2bd: 62dd                 | 	andq %r13, %r13
0x2bf: 71d202000000000000   | 	jle L3
0x2c8: c0f00100000000000000 | 	iaddq $1, %rax
0x2d2:                      | L3:
0x2d2: 50e71000000000000000 | 	mrmovq 16(%rdi), %r14
0x2dc: 40e61000000000000000 | 	rmmovq %r14, 16(%rsi)
0x2e6: 62ee                 | 	andq %r14, %r14
0x2e8: 71fb02000000000000   | 	jle L2
0x2f1: c0f00100000000000000 | 	iaddq $1, %rax
0x2fb:                      | L2:
0x2fb: 50870800000000000000 | 	mrmovq 8(%rdi), %r8
0x305: 40860800000000000000 | 	rmmovq %r8, 8(%rsi)
0x30f: 6288                 | 	andq %r8, %r8
0x311: 712403000000000000   | 	jle L1
0x31a: c0f00100000000000000 | 	iaddq $1, %rax
0x324:                      | L1:
0x324: 50970000000000000000 | 	mrmovq (%rdi), %r9
0x32e: 40960000000000000000 | 	rmmovq %r9,(%rsi)
0x338: 6299                 | 	andq %r9, %r9
0x33a: 714d03000000000000   | 	jle  Done
0x343: c0f00100000000000000 | 	iaddq $1, %rax	
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x34d:                      | Done:
0x34d: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x34e:                      | End:
                            | #/* $end ncopy-ys */
0x34e:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x350:                      | 	.align 8
0x350:                      | src:
0x350: ffffffffffffffff     | 	.quad -1
0x358: feffffffffffffff     | 	.quad -2
0x360: 0300000000000000     | 	.quad 3
0x368: 0400000000000000     | 	.quad 4
0x370: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x380:                      | 	.align 16
0x380:                      | Predest:
0x380: fadebc0000000000     | 	.quad 0xbcdefa
0x388:                      | dest:
0x388: abefcd0000000000     | 	.quad 0xcdefab
0x390: abefcd0000000000     | 	.quad 0xcdefab
0x398: abefcd0000000000     | 	.quad 0xcdefab
0x3a0: abefcd0000000000     | 	.quad 0xcdefab
0x3a8:                      | Postdest:
0x3a8: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x3b0:                      | .align 8
                            | # Run time stack
0x3b0: 0000000000000000     | 	.quad 0
0x3b8: 0000000000000000     | 	.quad 0
0x3c0: 0000000000000000     | 	.quad 0
0x3c8: 0000000000000000     | 	.quad 0
0x3d0: 0000000000000000     | 	.quad 0
0x3d8: 0000000000000000     | 	.quad 0
0x3e0: 0000000000000000     | 	.quad 0
0x3e8: 0000000000000000     | 	.quad 0
0x3f0: 0000000000000000     | 	.quad 0
0x3f8: 0000000000000000     | 	.quad 0
0x400: 0000000000000000     | 	.quad 0
0x408: 0000000000000000     | 	.quad 0
0x410: 0000000000000000     | 	.quad 0
0x418: 0000000000000000     | 	.quad 0
0x420: 0000000000000000     | 	.quad 0
0x428: 0000000000000000     | 	.quad 0
                            | 
0x430:                      | Stack:
