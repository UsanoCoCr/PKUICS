#######################################################################
# Test for copying block of size 4;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $4, %rdx		# src and dst have 4 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	#xorq %rax,%rax		# count = 0;
	iaddq $-8, %rdx		# len -= 10
	jl Tree

Loop8:
	mrmovq (%rdi), %r10		# read val from src...
	mrmovq 8(%rdi), %r11	# read val from src...
	mrmovq 16(%rdi), %r12	# read val from src...
	mrmovq 24(%rdi), %r13	# read val from src...
	mrmovq 32(%rdi), %r14	# read val from src...
	mrmovq 40(%rdi), %r8	# read val from src...
	mrmovq 48(%rdi), %r9	# read val from src...
	mrmovq 56(%rdi), %rbp	# read val from src...
	rmmovq %r10, (%rsi)		# ...and store it to dst
	rmmovq %r11, 8(%rsi)	# ...and store it to dst
	rmmovq %r12, 16(%rsi)	# ...and store it to dst
	rmmovq %r13, 24(%rsi)	# ...and store it to dst
	rmmovq %r14, 32(%rsi)	# ...and store it to dst
	rmmovq %r8, 40(%rsi)	# ...and store it to dst
	rmmovq %r9, 48(%rsi)	# ...and store it to dst
	rmmovq %rbp, 56(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle n1
	iaddq $1, %rax 	# count++
n1:
	andq %r11, %r11		# val <= 0?
	jle n2
	iaddq $1, %rax 	# count++
n2:
	andq %r12, %r12		# val <= 0?
	jle n3
	iaddq $1, %rax 	# count++
n3:
	andq %r13, %r13		# val <= 0?
	jle n4
	iaddq $1,%rax 	# count++
n4:
	andq %r14, %r14		# val <= 0?
	jle n5
	iaddq $1, %rax 	# count++
n5:
	andq %r8, %r8		# val <= 0?
	jle n6
	iaddq $1, %rax 	# count++
n6:
	andq %r9, %r9		# val <= 0?
	jle n7
	iaddq $1, %rax 	# count++
n7:
	andq %rbp, %rbp		# val <= 0?
	jle n8
	iaddq $1, %rax 	# count++
n8:
	iaddq $64, %rdi
	iaddq $64, %rsi
	iaddq $-8, %rdx
	jge Loop8

Tree:
	iaddq $5, %rdx
	jl Left
	jg Right
	je L3
Left:
	iaddq $2, %rdx
	je L1
	jg L2
	ret
L45:
	iaddq $1, %rdx
	jl L4
	jmp L5
Right:
	iaddq $-3, %rdx
	jl L45
	je L6

L7:
	mrmovq 48(%rdi), %r10
	rmmovq %r10, 48(%rsi)
	andq %r10, %r10
	jle L6 
	iaddq $1, %rax
L6:
	mrmovq 40(%rdi), %r11
	rmmovq %r11, 40(%rsi)
	andq %r11, %r11
	jle L5
	iaddq $1, %rax
L5:
	mrmovq 32(%rdi), %r12
	rmmovq %r12, 32(%rsi)
	andq %r12, %r12
	jle L4
	iaddq $1, %rax
L4:
	mrmovq 24(%rdi), %r13
	rmmovq %r13, 24(%rsi)
	andq %r13, %r13
	jle L3
	iaddq $1, %rax
L3:
	mrmovq 16(%rdi), %r14
	rmmovq %r14, 16(%rsi)
	andq %r14, %r14
	jle L2
	iaddq $1, %rax
L2:
	mrmovq 8(%rdi), %r8
	rmmovq %r8, 8(%rsi)
	andq %r8, %r8
	jle L1
	iaddq $1, %rax
L1:
	mrmovq (%rdi), %r9
	rmmovq %r9,(%rsi)
	andq %r9, %r9
	jle  Done
	iaddq $1, %rax	

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad -1
	.quad -2
	.quad 3
	.quad 4
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
