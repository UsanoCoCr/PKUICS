#######################################################################
# Test for copying block of size 128;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $128, %rdx		# src and dst have 128 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	call check	        # Call checker code
	halt                    # should halt with 0xaaaa in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# 康子熙, 2200017416
#
# Describe how and why you modified the baseline code.
# 在汇编层面，我借鉴了csapp书中5.8章节的循环展开，将每次循环展开为10次，这样可以减少循环次数，提高效率。同时，针对余数部分，我使用树构建了一个分支跳转，让每个可能的取值经过很少的跳转可以达到最后的计算位置，减少了跳转次数和代码量，提高了效率。
# 在HCL方面，我首先借鉴partB的思路，添加了iaddq指令。同时对于数据冒险的部分，我使用了书中所说的bypassing的技巧，使得两条连续的指令不需要bubble，提高了效率。
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	#xorq %rax,%rax		# count = 0;
	iaddq $-10, %rdx		# len -= 10
	jl Tree

Loop10:
	mrmovq (%rdi), %r10		# read val from src...
	mrmovq 8(%rdi), %r11	# read val from src...
	mrmovq 16(%rdi), %r12	# read val from src...
	mrmovq 24(%rdi), %r13	# read val from src...
	mrmovq 32(%rdi), %r14	# read val from src...
	mrmovq 40(%rdi), %r8	# read val from src...
	mrmovq 48(%rdi), %r9	# read val from src...
	mrmovq 56(%rdi), %rbp	# read val from src...
	mrmovq 64(%rdi), %rcx
	mrmovq 72(%rdi), %rsp
	rmmovq %r10, (%rsi)		# ...and store it to dst
	rmmovq %r11, 8(%rsi)	# ...and store it to dst
	rmmovq %r12, 16(%rsi)	# ...and store it to dst
	rmmovq %r13, 24(%rsi)	# ...and store it to dst
	rmmovq %r14, 32(%rsi)	# ...and store it to dst
	rmmovq %r8, 40(%rsi)	# ...and store it to dst
	rmmovq %r9, 48(%rsi)	# ...and store it to dst
	rmmovq %rbp, 56(%rsi)	# ...and store it to dst
	rmmovq %rcx, 64(%rsi)
	rmmovq %rsp, 72(%rsi)
	addq %rbx, %r10		# val <= 0?
	jle n1
	iaddq $1, %rax 	# count++
n1:
	addq %rbx, %r11		# val <= 0?
	jle n2
	iaddq $1, %rax 	# count++
n2:
	addq %rbx, %r12		# val <= 0?
	jle n3
	iaddq $1, %rax 	# count++
n3:
	addq %rbx, %r13		# val <= 0?
	jle n4
	iaddq $1,%rax 	# count++
n4:
	addq %rbx, %r14		# val <= 0?
	jle n5
	iaddq $1, %rax 	# count++
n5:
	addq %rbx, %r8		# val <= 0?
	jle n6
	iaddq $1, %rax 	# count++
n6:
	addq %rbx, %r9		# val <= 0?
	jle n7
	iaddq $1, %rax 	# count++
n7:
	addq %rbx, %rbp		# val <= 0?
	jle n8
	iaddq $1, %rax 	# count++
n8:
	addq %rbx, %rcx		# val <= 0?
	jle n9
	iaddq $1, %rax 	# count++
n9:
	addq %rbx, %rsp		# val <= 0?
	jle n10
	iaddq $1, %rax 	# count++
n10:
	iaddq $80, %rdi
	iaddq $80, %rsi
	iaddq $-10, %rdx
	jge Loop10

Tree:
	iaddq $7, %rdx
	jl Left
	jg Right
	je L3
Left:
	iaddq $2, %rdx
	je L1
	jg L2
	ret
L45:
	iaddq $1, %rdx
	jl L4
	jmp L5
Right:
	iaddq $-3, %rdx
	jl L45
	je L6
	iaddq $-2, %rdx
	je L8
	jl L7

L9:
	mrmovq 64(%rdi), %rsp
	rmmovq %rsp, 64(%rsi)
	addq %rbx, %rsp
	jle L8
	iaddq $1, %rax
L8:
	mrmovq 56(%rdi), %rcx
	rmmovq %rcx, 56(%rsi)
	addq %rbx, %rcx
	jle L7 
	iaddq $1, %rax
L7:
	mrmovq 48(%rdi), %r10
	rmmovq %r10, 48(%rsi)
	addq %rbx, %r10
	jle L6 
	iaddq $1, %rax
L6:
	mrmovq 40(%rdi), %r11
	rmmovq %r11, 40(%rsi)
	addq %rbx, %r11
	jle L5
	iaddq $1, %rax
L5:
	mrmovq 32(%rdi), %r12
	rmmovq %r12, 32(%rsi)
	addq %rbx, %r12
	jle L4
	iaddq $1, %rax
L4:
	mrmovq 24(%rdi), %r13
	rmmovq %r13, 24(%rsi)
	addq %rbx, %r13
	jle L3
	iaddq $1, %rax
L3:
	mrmovq 16(%rdi), %r14
	rmmovq %r14, 16(%rsi)
	addq %rbx, %r14
	jle L2
	iaddq $1, %rax
L2:
	mrmovq 8(%rdi), %r8
	rmmovq %r8, 8(%rsi)
	addq %rbx, %r8
	jle L1
	iaddq $1, %rax
L1:
	mrmovq (%rdi), %r9
	rmmovq %r9,(%rsi)
	addq %rbx, %r9
	jle  Done
	iaddq $1, %rax	

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:
#################################################################### 
# Epilogue code for the correctness testing driver
####################################################################

# This is the correctness checking code.
# It checks:
#   1. %rax has 58.  Set %rax to 0xbbbb if not.
#   2. The total length of the code is less than or equal to 1000.
#      Set %rax to 0xcccc if not.
#   3. The source data was copied to the destination.
#      Set %rax to 0xdddd if not.
#   4. The words just before and just after the destination region
#      were not corrupted.  Set %rax to 0xeeee if not.
# If all checks pass, then sets %rax to 0xaaaa
check:
	# Return value test
	irmovq $58,%r10
	subq %r10,%rax
	je checkb
	irmovq $0xbbbb,%rax  # Failed test #1
	jmp cdone
checkb:
	# Code length check
	irmovq EndFun,%rax
	irmovq StartFun,%rdx
	subq %rdx,%rax
	irmovq $1000,%rdx
	subq %rax,%rdx
	jge checkm
	irmovq $0xcccc,%rax  # Failed test #2
	jmp cdone
checkm:
	irmovq dest, %rdx # Pointer to next destination location
	irmovq src,%rbx   # Pointer to next source location
	irmovq $128,%rdi  # Count
	andq %rdi,%rdi
	je checkpre         # Skip check if count = 0
mcloop:
	mrmovq (%rdx),%rax
	mrmovq (%rbx),%rsi
	subq %rsi,%rax
	je  mok
	irmovq $0xdddd,%rax # Failed test #3
	jmp cdone
mok:
	irmovq $8,%rax
	addq %rax,%rdx	  # dest ++
	addq %rax,%rbx    # src++
	irmovq $1,%rax
	subq %rax,%rdi    # cnt--
	jg mcloop
checkpre:
	# Check for corruption
	irmovq Predest,%rdx
	mrmovq (%rdx), %rax  # Get word before destination
	irmovq $0xbcdefa, %rdx
	subq %rdx,%rax
	je checkpost
	irmovq $0xeeee,%rax  # Failed test #4
	jmp cdone
checkpost:
	# Check for corruption
	irmovq Postdest,%rdx
	mrmovq (%rdx), %rax  # Get word after destination
	irmovq $0xdefabc, %rdx
	subq %rdx,%rax
	je checkok
	irmovq $0xeeee,%rax # Failed test #4
	jmp cdone
checkok:
	# Successful checks
	irmovq $0xaaaa,%rax
cdone:
	ret

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad -1
	.quad 2
	.quad 3
	.quad -4
	.quad -5
	.quad 6
	.quad -7
	.quad 8
	.quad 9
	.quad 10
	.quad 11
	.quad 12
	.quad -13
	.quad -14
	.quad -15
	.quad -16
	.quad -17
	.quad -18
	.quad 19
	.quad -20
	.quad 21
	.quad -22
	.quad 23
	.quad 24
	.quad -25
	.quad 26
	.quad -27
	.quad -28
	.quad 29
	.quad -30
	.quad -31
	.quad 32
	.quad -33
	.quad 34
	.quad -35
	.quad 36
	.quad 37
	.quad 38
	.quad 39
	.quad 40
	.quad 41
	.quad -42
	.quad -43
	.quad 44
	.quad -45
	.quad 46
	.quad 47
	.quad 48
	.quad -49
	.quad -50
	.quad 51
	.quad 52
	.quad 53
	.quad 54
	.quad -55
	.quad 56
	.quad -57
	.quad -58
	.quad -59
	.quad -60
	.quad 61
	.quad 62
	.quad -63
	.quad -64
	.quad -65
	.quad -66
	.quad -67
	.quad 68
	.quad -69
	.quad -70
	.quad -71
	.quad 72
	.quad -73
	.quad -74
	.quad -75
	.quad -76
	.quad -77
	.quad -78
	.quad 79
	.quad -80
	.quad 81
	.quad -82
	.quad 83
	.quad -84
	.quad -85
	.quad -86
	.quad 87
	.quad -88
	.quad 89
	.quad -90
	.quad 91
	.quad -92
	.quad -93
	.quad 94
	.quad -95
	.quad -96
	.quad 97
	.quad -98
	.quad 99
	.quad -100
	.quad -101
	.quad 102
	.quad 103
	.quad -104
	.quad 105
	.quad 106
	.quad -107
	.quad 108
	.quad -109
	.quad -110
	.quad 111
	.quad -112
	.quad 113
	.quad 114
	.quad -115
	.quad -116
	.quad -117
	.quad -118
	.quad 119
	.quad -120
	.quad 121
	.quad -122
	.quad 123
	.quad -124
	.quad 125
	.quad -126
	.quad 127
	.quad 128
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
